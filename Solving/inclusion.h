#ifndef DM5_INCLUSION_H
#define DM5_INCLUSION_H
#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <algorithm>
#include <stack>

const static std::vector<std::set<int>> graph_g1 {
        {45, 15}, // Armenia
        {17, 32, 30, 22}, // Albania
        {14, 42}, // Andorra
        {16, 10, 40, 18, 41, 21, 44, 24}, // Austria
        {37, 23, 25, 34, 46}, // Belarus
        {31, 16, 26, 14}, // Belgium
        {8, 39, 30}, // Bosnia and Herzegovina
        {36, 39, 32, 17, 45}, // Bulgaria
        {41, 18, 39, 6, 30}, // Croatia
        {}, // Cyprus
        {16, 34, 40, 3}, // Czech Republic
        {16}, // Denmark
        {37, 23}, // Estonia
        {43, 33, 37}, // Finland
        {5, 26, 16, 44, 21, 42, 2, 29}, // France
        {37, 45, 0}, // Georgia
        {11, 31, 5, 26, 14, 44, 3, 10, 34}, // Germany
        {1, 32, 7, 45}, // Greece
        {3, 40, 46, 36, 39, 8, 41}, // Hungary
        {}, // Iceland
        {47}, // Ireland
        {14, 44, 3, 41, 48, 38}, // Italy
        {1, 30, 39, 32}, // Kosovo
        {12, 37, 4, 25}, // Latvia
        {3, 44}, // Liechtenstein
        {23, 4, 34, 37}, // Lithuania
        {5, 16, 14}, // Luxembourg
        {}, // Malta
        {36, 46}, // Moldova
        {14}, // Monaco
        {8, 6, 39, 22, 1}, // Montenegro
        {5, 16}, // Netherlands
        {22, 39, 1, 17, 7}, // North Macedonia
        {13, 43, 37}, // Norway
        {16, 10, 40, 46, 4, 25, 37}, // Poland
        {42}, // Portugal
        {18, 46, 28, 7, 39}, // Romania
        {33, 13, 12, 23, 25, 34, 4, 46, 15}, // Russia
        {21}, // San Marino
        {18, 36, 7, 32, 30, 6, 8, 22}, // Serbia
        {34, 10, 3, 18, 46}, // Slovakia
        {3, 21, 18, 8}, // Slovenia
        {14, 35, 2}, // Spain
        {33, 13}, // Sweden
        {16, 3, 24, 21, 14}, // Switzerland
        {17, 7, 15, 0}, // Turkey
        {4, 37, 34, 40, 18, 36, 28}, // Ukraine
        {20}, // United Kingdom
        {21} // Vatican City
};
const static std::vector<std::set<int>> graph_g = {
        {41, 14}, // Armenia
        {16, 28, 26, 19}, // Albania
        {13, 38}, // Andorra
        {15, 9, 36, 17, 37, 18, 40, 21}, // Austria
        {33, 20, 22, 30, 42}, // Belarus
        {27, 15, 23, 13}, // Belgium
        {8, 35, 26}, // Bosnia and Herzegovina
        {32, 35, 28, 16, 41}, // Bulgaria
        {37, 17, 35, 6, 26}, // Croatia
        {15, 30, 36, 3}, // Czech Republic
        {15}, // Denmark
        {33, 20}, // Estonia
        {39, 29, 33}, // Finland
        {5, 23, 15, 40, 18, 38, 2, 25}, // France
        {33, 41, 0}, // Georgia
        {10, 27, 5, 23, 13, 40, 3, 9, 30}, // Germany
        {1, 28, 7, 41}, // Greece
        {3, 36, 42, 32, 35, 8, 37}, // Hungary
        {13, 40, 3, 37, 43, 34}, // Italy
        {1, 26, 35, 28}, // Kosovo
        {11, 33, 4, 22}, // Latvia
        {3, 40}, // Liechtenstein
        {20, 4, 30, 33}, // Lithuania
        {5, 15, 13}, // Luxembourg
        {32, 42}, // Moldova
        {13}, // Monaco
        {8, 6, 35, 19, 1}, // Montenegro
        {5, 15}, // Netherlands
        {19, 35, 1, 16, 7}, // North Macedonia
        {12, 39, 33}, // Norway
        {15, 9, 36, 42, 4, 22, 33}, // Poland
        {38}, // Portugal
        {17, 42, 24, 7, 35}, // Romania
        {29, 12, 11, 20, 22, 30, 4, 42, 14}, // Russia
        {18}, // San Marino
        {17, 32, 7, 28, 26, 6, 8, 19}, // Serbia
        {30, 9, 3, 17, 42}, // Slovakia
        {3, 18, 17, 8}, // Slovenia
        {13, 31, 2}, // Spain
        {29, 12}, // Sweden
        {15, 3, 21, 18, 13}, // Switzerland
        {16, 7, 14, 0}, // Turkey
        {4, 33, 30, 36, 17, 32, 24}, // Ukraine
        {18} // Vatican City
};
static std::map<int, std::string> g1_names = {
        {0, "Armenia"},
        {1, "Albania"},
        {2, "Andorra"},
        {3, "Austria"},
        {4, "Belarus"},
        {5, "Belgium"},
        {6, "Bosnia and Herzegovina"},
        {7, "Bulgaria"},
        {8, "Croatia"},
        {9, "Cyprus"},
        {10, "Czech Republic"},
        {11, "Denmark"},
        {12, "Estonia"},
        {13, "Finland"},
        {14, "France"},
        {15, "Georgia"},
        {16, "Germany"},
        {17, "Greece"},
        {18, "Hungary"},
        {19, "Iceland"},
        {20, "Ireland"},
        {21, "Italy"},
        {22, "Kosovo"},
        {23, "Latvia"},
        {24, "Liechtenstein"},
        {25, "Lithuania"},
        {26, "Luxembourg"},
        {27, "Malta"},
        {28, "Moldova"},
        {29, "Monaco"},
        {30, "Montenegro"},
        {31, "Netherlands"},
        {32, "North Macedonia"},
        {33, "Norway"},
        {34, "Poland"},
        {35, "Portugal"},
        {36, "Romania"},
        {37, "Russia"},
        {38, "San Marino"},
        {39, "Serbia"},
        {40, "Slovakia"},
        {41, "Slovenia"},
        {42, "Spain"},
        {43, "Sweden"},
        {44, "Switzerland"},
        {45, "Turkey"},
        {46, "Ukraine"},
        {47, "United Kingdom"},
        {48, "Vatican City"}
};
static std::map<int, std::string> g_names = {
        {0, "Armenia"},
        {1, "Albania"},
        {2, "Andorra"},
        {3, "Austria"},
        {4, "Belarus"},
        {5, "Belgium"},
        {6, "Bosnia and Herzegovina"},
        {7, "Bulgaria"},
        {8, "Croatia"},
        {9, "Czech Republic"},
        {10, "Denmark"},
        {11, "Estonia"},
        {12, "Finland"},
        {13, "France"},
        {14, "Georgia"},
        {15, "Germany"},
        {16, "Greece"},
        {17, "Hungary"},
        {18, "Italy"},
        {19, "Kosovo"},
        {20, "Latvia"},
        {21, "Liechtenstein"},
        {22, "Lithuania"},
        {23, "Luxembourg"},
        {24, "Moldova"},
        {25, "Monaco"},
        {26, "Montenegro"},
        {27, "Netherlands"},
        {28, "North Macedonia"},
        {29, "Norway"},
        {30, "Poland"},
        {31, "Portugal"},
        {32, "Romania"},
        {33, "Russia"},
        {34, "San Marino"},
        {35, "Serbia"},
        {36, "Slovakia"},
        {37, "Slovenia"},
        {38, "Spain"},
        {39, "Sweden"},
        {40, "Switzerland"},
        {41, "Turkey"},
        {42, "Ukraine"},
        {43, "Vatican City"}
};
static const std::vector<std::vector<int>> distances =
        {
                {0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1400, -1, -1},
                {-1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 730, -1, -1, 250, -1, -1, -1, -1, -1, -1, 150, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 860, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 610, -1, -1, -1, -1, -1},
                {-1, -1, -1, 0, -1, -1, -1, -1, -1, 330, -1, -1, -1, -1, -1, 680, -1, 250, 1100, -1, -1, 660, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 83, 440, -1, -1, 840, -1, -1, -1},
                {-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 470, -1, 180, -1, -1, -1, -1, -1, -1, -1, 560, -1, -1, 720, -1, -1, -1, -1, -1, -1, -1, -1, 560, -1},
                {-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 310, -1, 760, -1, -1, -1, -1, -1, -1, -1, 210, -1, -1, -1, 210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, 0, -1, 420, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1, 300, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 760, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230, -1, -1, -1, 360, -1, -1, 400, -1, -1, -1, -1, -1, 1000, -1, -1},
                {-1, -1, -1, -1, -1, -1, 420, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 340, -1, -1, -1, -1, -1, -1, -1, -1, 720, -1, -1, -1, -1, -1, -1, -1, -1, 460, -1, 140, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 330, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 360, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 740, -1, -1, -1, -1, -1, 330, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 310, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1000, -1, -1, -1, 1100, -1, -1, -1, -1, -1, 510, -1, -1, -1, -1},
                {-1, -1, 860, -1, -1, 310, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1000, -1, -1, 1400, -1, -1, -1, -1, 360, -1, 960, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1300, -1, 570, -1, -1, -1},
                {280, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2800, -1, -1, -1, -1, -1, -1, -1, 1300, -1, -1},
                {-1, -1, -1, 680, -1, 760, -1, -1, -1, 360, 560, -1, -1, 1000, -1, 0, -1, -1, -1, -1, -1, -1, -1, 740, -1, -1, -1, 660, -1, -1, 570, -1, -1, -1, -1, -1, -1, -1, -1, -1, 960, -1, -1, -1},
                {-1, 730, -1, -1, -1, -1, -1, 760, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1500, -1, -1},
                {-1, -1, -1, 250, -1, -1, -1, -1, 340, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 830, -1, -1, 380, 200, 460, -1, -1, -1, -1, 1100, -1},
                {-1, -1, -1, 1100, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1400, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, -1, -1, 460, -1, -1, 910, -1, -1, 5},
                {-1, 250, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 250, -1, 94, -1, -1, -1, -1, -1, -1, 320, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, 470, -1, -1, -1, -1, -1, -1, 310, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 290, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 920, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 660, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 230, -1, -1, -1},
                {-1, -1, -1, -1, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290, -1, 0, -1, -1, -1, -1, -1, -1, -1, 510, -1, -1, 950, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, 210, -1, -1, -1, -1, -1, -1, -1, 360, -1, 740, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, 490, -1, -1, -1, -1, -1, -1, -1, -1, -1, 470, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 960, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 150, -1, -1, -1, -1, 230, -1, 720, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 250, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 420, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, 210, -1, -1, -1, -1, -1, -1, -1, -1, -1, 660, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 290, -1, -1, -1, -1, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1, 670, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 430, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1000, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 2100, -1, -1, -1, -1, -1, 520, -1, -1, -1, -1},
                {-1, -1, -1, -1, 560, -1, -1, -1, -1, 740, -1, -1, -1, -1, -1, 570, -1, -1, -1, -1, -1, -1, 510, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 1300, -1, -1, 660, -1, -1, -1, -1, -1, 770, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, 620, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, 360, -1, -1, -1, -1, -1, -1, -1, -1, -1, 830, -1, -1, -1, -1, -1, -1, 490, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 590, -1, -1, -1, -1, -1, -1, 1000, -1},
                {-1, -1, -1, -1, 720, -1, -1, -1, -1, -1, -1, 1100, 1100, -1, 2800, -1, -1, -1, -1, -1, 920, -1, 950, -1, -1, -1, -1, -1, -1, 2100, 1300, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 850, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, 300, 400, 460, -1, -1, -1, -1, -1, -1, -1, -1, 380, -1, 320, -1, -1, -1, -1, -1, -1, 420, -1, 430, -1, -1, -1, 590, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 83, -1, -1, -1, -1, -1, 330, -1, -1, -1, -1, -1, -1, -1, 200, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 660, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 1300, -1},
                {-1, -1, -1, 440, -1, -1, -1, -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, 460, 460, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1},
                {-1, -1, 610, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1300, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 620, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 510, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 520, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1},
                {-1, -1, -1, 840, -1, -1, -1, -1, -1, -1, -1, -1, -1, 570, -1, 960, -1, -1, 910, -1, -1, 230, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1},
                {1400, -1, -1, -1, -1, -1, -1, 1000, -1, -1, -1, -1, -1, -1, 1300, -1, 1500, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1},
                {-1, -1, -1, -1, 560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1100, -1, -1, -1, -1, -1, -1, 470, -1, -1, -1, -1, -1, 770, -1, 1000, 850, -1, -1, 1300, -1, -1, -1, -1, -1, 0, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0}
        };

struct edge {
    int first;
    int second;
    int weight;
    edge(int a, int b, int c = 0) : first(a), second(b), weight(c) {};

    bool operator<(const edge& b) const;
};
std::ostream& operator<<(std::ostream& stream, const edge& e);


// b
std::vector<std::vector<int>> Floyd_Warshall_algorithm(const std::vector<std::set<int>>& graph);
int get_V(const std::vector<std::set<int>>& graph);
int get_E(const std::vector<std::set<int>>& graph);
int get_d(const std::vector<std::set<int>>& graph);
int get_D(const std::vector<std::set<int>>& graph);
std::vector<int> get_eccentricity_list(const std::vector<std::vector<int>>& distance_matrix);
int get_rad(const std::vector<std::vector<int>>& distance_matrix);
int get_diam(const std::vector<std::vector<int>>& distance_matrix);
std::vector<std::string> get_center(const std::vector<std::vector<int>>& distance_matrix);

// e f
bool check(const std::vector<std::set<int>>& graph, const std::set<int>& candidates, const std::set<int>& wrong);
void Bron_Kerbosch_algorithm(const std::vector<std::set<int>>& graph, std::set<int>& compsub, std::set<int>& candidates, std::set<int>& wrong, std::set<int>& max_clique);

// l
void dfs_blocks(int v, int parent, const std::vector<std::set<int>>& graph, std::vector<std::set<int>>& biconnected_components, std::vector<int>& in, std::vector<int>& up, std::vector<bool>& visited, std::stack<std::pair<int, int>>& st, int& time);
std::vector<std::set<int>> find_biconnected_components(const std::vector<std::set<int>>& graph);

// m
void dfs_ebс(int v, int parent, const std::vector<std::set<int>>& graph, std::vector<std::set<int>>& edge_biconnected_components, std::vector<int>& in, std::vector<int>& up, std::vector<bool>& visited, std::stack<int>& st, int& time);
std::vector<std::set<int>> find_edge_biconnected_components(const std::vector<std::set<int>>& graph);

// n
std::set<edge> get_edges(const std::vector<std::set<int>>& graph);
std::pair<std::vector<std::set<int>>, int> Kruskal_algorithm(const std::vector<std::set<int>>& graph);

// o
void dfs(int v, int parent, const std::vector<std::set<int>> &tree, int weight, std::vector<int>& subtree_size, std::set<int>& centroids);
std::set<int> find_centroid(const std::vector<std::set<int>> &tree, int weight);

// p
std::vector<int> Pufer_algorithm(std::vector<std::set<int>> &tree);

void b_solution();
void e_solution();
void f_solution();
void l_solution();
void m_solution();
void n_solution();
void o_solution();
void p_solution();
int main();
#endif //DM5_INCLUSION_H
